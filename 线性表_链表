#include<stdio.h>
#include<stdlib.h>
#define size 5

typedef struct Link {
	int  elem;
	struct Link *next;
}link;
//初始化链表的函数
link * initLink();
//链表插入的函数，p是链表，elem是插入的结点的数据域，add是插入的位置
link * insertElem(link * p, int elem, int add);
//删除结点的函数，p代表操作链表，add代表删除节点的位置
link * delElem(link * p, int add);
//查找结点的函数，elem为目标结点的数据域的值
int selectElem(link * p, int elem);
//更新结点的函数，newElem为新的数据域的值
link *amendElem(link * p, int add, int newElem);
void display(link *p);

int main() {
	system("title");
	int optin;
	int inter;
	printf("初始化链表为：\n");
	link *p = initLink();
	display(p);

	printf("插入元素：\n");
	printf("插入元素的位置：\n");
	scanf_s("%d",&optin);
	printf("插入的元素是：\n");
	scanf_s("%d",&inter);
	p = insertElem(p, inter, optin);
	display(p);

	printf("删除元素:\n");
	scanf_s("%d",&inter);
	p = delElem(p, inter);
	display(p);

	printf("查找集合元素的位置：\n");
	scanf_s("%d",&optin);
	int address = selectElem(p,optin);
	if (address == -1) {
		printf("没有该元素");
	}
	else {
		printf("元素%d的位置为: %d\n",optin, address);
	}

	printf("更改元素：\n");
	printf("需要更改元素的位置:\n");
	scanf_s("%d",&optin);
	printf("更改为：\n");
	scanf_s("%d",&inter);
	p = amendElem(p, optin, inter);
	display(p);
	system("pause");
	return 0;
}


link * initLink() {
	int inter;
	link * p = (link*)malloc(sizeof(link));//创建一个头结点
	link * temp = p;//声明一个指针指向头结点，
					//生成链表
	for (int i = 1; i<size; i++) {
		printf("the num of %d:",i);
		link *a = (link*)malloc(sizeof(link));
		scanf_s("%d",&inter);
		a->elem = inter;
		a->next = NULL;
		temp->next = a;
		temp = temp->next;
	}
	return p;
}

link * insertElem(link * p, int elem, int add) {
	link * temp = p;//创建临时结点temp
					//首先找到要插入位置的上一个结点
	for (int i = 1; i<add; i++) {
		if (temp == NULL) {
			printf("插入位置无效\n");
			return p;
		}
		temp = temp->next;
	}
	//创建插入结点c
	link * c = (link*)malloc(sizeof(link));
	c->elem = elem;
	//向链表中插入结点
	c->next = temp->next;
	temp->next = c;
	return  p;
}

link * delElem(link * p, int add) {
	if (add > size ||add <= 0) {
		printf("输入错误！\n");
		return p;
	}
	link * temp = p;
	//遍历到被删除结点的上一个结点
	for (int i = 1; i<add; i++) {
		temp = temp->next;
	}
	link * del = temp->next;//单独设置一个指针指向被删除结点，以防丢失
	temp->next = temp->next->next;//删除某个结点的方法就是更改前一个结点的指针域
	free(del);//手动释放该结点，防止内存泄漏
	return p;
}

int selectElem(link * p, int elem) {
	link * t = p;
	int i = 1;
	while (t->next) {
		t = t->next;
		if (t->elem == elem) {
			return i;
		}
		i++;
	}
	return -1;
}

link *amendElem(link * p, int add, int newElem) {
	link * temp = p;
	temp = temp->next;//tamp指向首元结点
					  //temp指向被删除结点
	for (int i = 1; i<add; i++) {
		temp = temp->next;
	}
	temp->elem = newElem;
	return p;
}



void display(link *p) {
	link* temp = p;//将temp指针重新指向头结点
				   //只要temp指针指向的结点的next不是Null，就执行输出语句。
	while (temp->next) {
		temp = temp->next;
		printf("%d ", temp->elem);
	}
	printf("\n");
}
